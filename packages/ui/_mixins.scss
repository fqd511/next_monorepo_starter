@import "variables";

@mixin transition {
  transition: all ease 0.2s;
}

@mixin flex-column {
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
}

@mixin flex-row {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
}

// 文本超出显示省略号
@mixin text-overflow($line-number: 2) {
  -webkit-box-orient: vertical;
  display: -webkit-box;
  -webkit-line-clamp: $line-number;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
/// @example scss - usage:
///  .foo {
///    color: red;
///
///    @include respond-to('medium') {
///      color: blue;
///    }
///  }
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
                    type-of($raw-query) == 'string',
                    unquote($raw-query),
                    inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

// $max value for huge screen
@mixin responsive-value($property, $max, $min: $max) {
  #{$property}: $min;
  @include respond-to("medium") {
    #{$property}: $min + ($max - $min)/ 3;
  }
  @include respond-to("large") {
    #{$property}: $min + ($max - $min)/ 3 * 2;
  }
  @include respond-to("huge") {
    #{$property}: $max;
  }
}

// $min value for huge screen
@mixin responsive-value-reverse($property, $max, $min: $max) {
  #{$property}: $max;
  @include respond-to("medium") {
    #{$property}: $min + ($max - $min)/ 3 * 2;
  }
  @include respond-to("large") {
    #{$property}: $min + ($max - $min)/ 3;
  }
  @include respond-to("huge") {
    #{$property}: $min;
  }
}
